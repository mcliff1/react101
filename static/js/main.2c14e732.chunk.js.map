{"version":3,"sources":["serviceWorker.js","components/counter.jsx","components/counters.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Counter","state","value","_this","props","tags1","tags","styles","fontSize","fontWeight","handleIncrement","product","console","log","setState","this","classes","_this2","react_default","a","createElement","children","style","className","getBadgeClasses","formatCount","onClick","id","length","map","tag","key","renderTags","Component","Counters","counters","counter","components_counter","selected","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCuESC,6MArFbC,MAAQ,CACNC,MAAOC,EAAKC,MAAMF,MAClBG,MAAO,CAAC,OAAQ,OAAQ,QACxBC,KAAM,CAAE,WAGVC,OAAS,CACPC,SAAU,GACVC,WAAY,UAqBdC,gBAAkB,SAACC,GAEjBC,QAAQC,IAAI,oBAAqBF,GAGjCR,EAAKW,SAAS,CAACZ,MAAOC,EAAKF,MAAMC,MAAQ,kFAO7B,IACJA,EAAUa,KAAKd,MAAfC,MACR,OAAiB,IAAVA,EAAc,OAASA,4CAK9B,IAAIc,EAAU,mBAEd,OADAA,GAAgC,IAArBD,KAAKd,MAAMC,MAAc,UAAY,2CAIzC,IAAAe,EAAAF,KAIP,OAFAH,QAAQC,IAAI,QAASE,KAAKX,OAGxBc,EAAAC,EAAAC,cAAA,WACIL,KAAKX,MAAMiB,SACbH,EAAAC,EAAAC,cAAA,QAAME,MAAOP,KAAKR,OAAQgB,UAAWR,KAAKS,mBAAoBT,KAAKU,eACnEP,EAAAC,EAAAC,cAAA,UAAQM,QAAU,kBAAMT,EAAKP,gBAAgB,CAACiB,GAAG,KAAKL,MAAQ,CAAEd,SAAU,IAAOe,UAAU,4BAA3F,mDAON,OAA+B,IAA3BR,KAAKd,MAAMK,KAAKsB,OAAqBV,EAAAC,EAAAC,cAAA,8BAGvCF,EAAAC,EAAAC,cAAA,UACGL,KAAKd,MAAMK,KAAKuB,IAAI,SAAAC,GAAG,OAAIZ,EAAAC,EAAAC,cAAA,MAAIW,IAAKD,GAAMA,wCAQ7C,OAAQZ,EAAAC,EAAAC,cAAA,WAAML,KAAKiB,qBAlFDC,aCqBPC,6MAnBbjC,MAAQ,CACNkC,SAAU,CACR,CAAER,GAAI,EAAGzB,MAAO,GAChB,CAAEyB,GAAI,EAAGzB,MAAO,GAChB,CAAEyB,GAAI,EAAGzB,MAAO,GAChB,CAAEyB,GAAI,EAAGzB,MAAO,6EAKlB,OACEgB,EAAAC,EAAAC,cAAA,WACIL,KAAKd,MAAMkC,SAASN,IAAI,SAAAO,GAAO,OAC/BlB,EAAAC,EAAAC,cAACiB,EAAD,CAASN,IAAKK,EAAQT,GAAIzB,MAAOkC,EAAQlC,MAAOoC,UAAU,GAAOpB,EAAAC,EAAAC,cAAA,gBAAQgB,EAAQT,eAdpEM,aCKvBM,IAASC,OAAOtB,EAAAC,EAAAC,cAACe,EAAD,MAAcM,SAASC,eAAe,SHyHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2c14e732.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nclass Counter extends Component {\r\n\r\n  state = {\r\n    value: this.props.value,\r\n    tags1: ['tag1', 'tag2', 'tag3'],\r\n    tags: [ 'tag2']\r\n  };\r\n\r\n  styles = {\r\n    fontSize: 10,\r\n    fontWeight: 'bold'\r\n  };\r\n\r\n  // constructor() {\r\n  //   // need the constructor\r\n  //   // have access to This\r\n  //   super();\r\n  //   console.log('Constuructor', this)\r\n  //   //  here I haev access to this  (I don't in handleIncrement)\r\n  //   this.handleIncrement = this.handleIncrement.bind(this);    // creates a new instance of the handleIncrement funct ref the current counter object\r\n  // }\r\n\r\n  // handleIncrement() {\r\n  //   console.log('Increment Clicked', this);\r\n  //   // obj.method()   this returns ref to obj\r\n  //   // function()  this returns undefined in strict mode\r\n  //\r\n  // }\r\n\r\n\r\n  // OR use an arrow function (to bind the event handler)\r\n  handleIncrement = (product) => {\r\n\r\n    console.log('Increment Clicked', product);\r\n    // obj.method()   this returns ref to obj\r\n    // function()  this returns undefined in strict mode\r\n    this.setState({value: this.state.value + 1});\r\n  }\r\n\r\n  // doHandleIncrement = () => {\r\n  //   this.handleIncrement({id: 1});\r\n  // }\r\n\r\n  formatCount() {\r\n    const { value } = this.state;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\"\r\n    classes += this.state.value === 0 ? \"warning\" : \"primary\";\r\n    return classes\r\n  }\r\n\r\n  render() {\r\n    /*        <button onClick={this.doHandleIncrement} style={ { fontSize: 10 } } className=\"btn btn-secondary btn-sm\">Increment</button> */\r\n    console.log('props', this.props);\r\n\r\n    return (\r\n      <div>\r\n        { this.props.children }\r\n        <span style={this.styles} className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button onClick={ () => this.handleIncrement({id:1})} style={ { fontSize: 10 } } className=\"btn btn-secondary btn-sm\">Increment</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\nrenderTags() {\r\n  if (this.state.tags.length === 0) return <p>There are no tags</p>;\r\n\r\n  return (\r\n    <ul>\r\n      {this.state.tags.map(tag => <li key={tag}>{tag}</li>)}\r\n    </ul>\r\n  );\r\n\r\n}\r\n\r\n\r\n  render2() {\r\n    return (<div>{this.renderTags()}</div>);\r\n  }\r\n\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from 'react';\r\nimport Counter from './counter';\r\n\r\nclass Counters extends Component {\r\n  state = {\r\n    counters: [\r\n      { id: 1, value: 4 },\r\n      { id: 2, value: 0 },\r\n      { id: 3, value: 0 },\r\n      { id: 4, value: 0 }\r\n    ]\r\n  };\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        { this.state.counters.map(counter =>\r\n          <Counter key={counter.id} value={counter.value} selected={true} ><h4>Hi {counter.id}</h4></Counter>) }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Counters from './components/counters';\n\nReactDOM.render(<Counters />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}